Detailed Instructions:
Context & Why:
The current implementation of glossary popovers and slider feedback is clunky, visually disruptive, and doesn't meet the project's standard for a clean, modern UI. To fix this, we are consolidating all contextual help into a single, non-intrusive info panel and transforming the slider feedback from static text into a dynamic, visual effect. This will create a more intuitive, efficient, and aesthetically pleasing user experience.

What Needs to Be Done:

Remove the <Popover>-based TerminologyTooltip component entirely from DynamicTextRenderer. Highlighting will now be for visual indication only, and definitions will live in the new panel.
In MultipleChoiceQuestion.tsx and ScaleQuestion.tsx, create a unified, collapsible "Info Panel" triggered by a single <Info /> icon in the card's header.
The Info Panel, when opened, will display a list of all relevant glossary terms and their definitions for that slide.
For ScaleQuestion.tsx, completely remove the text-box-based receptive feedback.
Implement the new visual slider feedback: as the user slides, the "Very Light" and "Very Intense" labels at the ends of the slider will dynamically change their opacity and scale to reflect the current value.
How to Implement (Code Changes & Guidance):

Refactor the Glossary System (No More Popovers):

File: client/src/components/ui/TerminologyTooltip.tsx
Action: Delete this file or simplify it drastically. We no longer want individual popovers on each term.
File: client/src/components/ui/DynamicTextRenderer.tsx
Action: Modify this component. It should still use the regex to find terms, but instead of wrapping them in a TerminologyTooltip, it should just wrap them in a styled <span> to give them a subtle visual distinction (e.g., dotted underline and a specific color). It should not have any onClick or onHover popover behavior.
TypeScript

// Simplified output inside DynamicTextRenderer.tsx for a matched term
result.push(
  <span key={...} className="underline decoration-dotted decoration-purple-400/60 font-medium">
    {matchedTerm}
  </span>
);
File: client/src/components/questions/MultipleChoiceQuestion.tsx
Action:
Ensure DynamicTextRenderer is only used for the main question.title and question.description.
Remove it completely from the .map() function that renders the question.options. The options should just be plain text.
Implement the New Integrated Info Panel:

Files: MultipleChoiceQuestion.tsx and ScaleQuestion.tsx.
Action:
At the bottom of the main card's JSX in both components, add a <Collapsible> section.
The <CollapsibleTrigger> should be a single <Button> with an <Info /> icon, placed neatly in the card's header (e.g., next to the category badge).
The <CollapsibleContent> will be the "Info Panel". Inside it, you will conditionally render the list of glossary terms found on the slide.
Logic: Use the extractRelevantTerms function (which the AI already created) to get an array of terms. Pass this array to the Info Panel. If the array is not empty, display the "Info" trigger button.
UI: The panel should be styled beautifully, using the vibrant gradients from the popover design. Each term can be listed with its definition.
Implement New Visual & Receptive Slider Feedback:

File: client/src/components/questions/ScaleQuestion.tsx.
Action:
Step A: Remove Old Feedback. Delete the "Your Rating" text box and all associated logic from the info panel.
Step B: Dynamic Label Styling Logic. Calculate the slider's progress as a percentage (0.0 to 1.0).
TypeScript

// Inside ScaleQuestion component
const progressPercent = (value - question.scale_min) / (question.scale_max - question.scale_min);

// Fade out the left label as we move right, and vice versa.
// The `Math.max(0.4, ...)` ensures labels never become fully invisible.
const leftLabelOpacity = Math.max(0.4, 1 - progressPercent * 1.5);
const rightLabelOpacity = Math.max(0.4, progressPercent * 1.5);

// Make the label scale up when the slider is at its extreme end.
const leftLabelScale = value === question.scale_min ? 1.1 : 1;
const rightLabelScale = value === question.scale_max ? 1.1 : 1;
Step C: Apply Dynamic Styles. Use motion.span for the slider labels and pass these calculated values to the animate prop.
TypeScript

// In the JSX for the slider labels
<div className="flex justify-between text-sm mt-2">
  <motion.span
    className="font-medium text-white"
    animate={{ opacity: leftLabelOpacity, scale: leftLabelScale }}
    transition={{ duration: 0.2 }}
  >
    {question.scale_labels[0]}
  </motion.span>
  <motion.span
    className="font-medium text-white"
    animate={{ opacity: rightLabelOpacity, scale: rightLabelScale }}
    transition={{ duration: 0.2 }}
  >
    {question.scale_labels[1]}
  </motion.span>
</div>
Replit AI Guidance:
Refactor the Glossary: First, modify DynamicTextRenderer to only apply a non-interactive styled <span>. Remove the <TerminologyTooltip> component. Refine MultipleChoiceQuestion.tsx to not highlight terms in the options.
Create the Info Panel: Implement the <Collapsible> info panel triggered by a single <Info /> icon in the header of both MultipleChoiceQuestion.tsx and ScaleQuestion.tsx. Populate this panel with the list of relevant term definitions.
Overhaul the Slider: In ScaleQuestion.tsx, delete the text-based feedback. Implement the dynamic label opacity and scale animations based on the slider's value, as detailed above. This is a purely visual enhancement.
Ensure all new UI elements are fully responsive and use smooth framer-motion transitions, creating the powerful, clean, and modern user experience we're targeting.