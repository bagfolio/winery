Standardize API Mutation Calls with apiRequest Utility
Context & Why:
The project includes a utility function apiRequest in client/src/lib/queryClient.ts designed for making API requests. This utility likely centralizes aspects like setting headers (e.g., Content-Type), including credentials, and consistent error handling (throwIfResNotOk).

Currently, some parts of the application, notably client/src/pages/SommelierDashboard.tsx for its createPackageMutation and createSessionMutation (around lines 36-71 and 74-109 respectively), use the native fetch API directly for POST requests. While functional, this leads to duplicated logic for request setup and error handling, and bypasses any benefits or standardized behavior provided by apiRequest.

The useSessionPersistence.ts hook already uses apiRequest for its POST operations. Standardizing on apiRequest for all client-to-server API calls (especially mutations) will improve code consistency, maintainability, and ensure uniform request handling.

Objective (What):
Refactor the API mutation calls (POST requests) within client/src/pages/SommelierDashboard.tsx (and any other similar direct fetch calls for mutations if found) to use the existing apiRequest utility function from client/src/lib/queryClient.ts.

Implementation Details (How):

Import apiRequest:

Ensure apiRequest is imported in client/src/pages/SommelierDashboard.tsx:
TypeScript

import { apiRequest } from "@/lib/queryClient"; // Verify path
Refactor createPackageMutation:

Locate the mutationFn within createPackageMutation (around line 38).
Replace the direct fetch call with apiRequest:
TypeScript

// Before:
// const response = await fetch('/api/packages', {
//   method: 'POST',
//   headers: { 'Content-Type': 'application/json' },
//   body: JSON.stringify({ code, name, description })
// });
// if (!response.ok) {
//   const error = await response.json();
//   throw new Error(error.message || 'Failed to create package');
// }
// return response.json();

// After:
const response = await apiRequest('POST', '/api/packages', { code, name, description });
return response.json(); // apiRequest already throws if not res.ok
Refactor createSessionMutation:

Locate the mutationFn within createSessionMutation (around line 76).
This function currently makes two fetch calls: one to get package details, then one to create the session.
The call to fetch(\/api/packages/${selectedPackage}`)is a GET request. IfapiRequest` is also suitable for GET requests that expect JSON and need similar error handling, it can be used here too. Otherwise, focus on the POST request.
Refactor the POST request to /api/sessions to use apiRequest:
TypeScript

// ... (fetch for package details can remain if apiRequest is only for mutations, or refactor too)

// Create session (POST request)
// Before:
// const sessionResponse = await fetch('/api/sessions', { ... });
// if (!sessionResponse.ok) { throw new Error('Failed to create session'); }
// return sessionResponse.json();

// After:
const sessionResponse = await apiRequest('POST', '/api/sessions', {
  packageId: winePackage.id, // Assuming winePackage is fetched correctly
  name: newSessionName 
});
return sessionResponse.json();
Review Other Components (If Any):

Briefly scan other components or hooks that might make direct fetch calls for API mutations and refactor them similarly if appropriate.
Acceptance Criteria:

All API POST requests (mutations) in SommelierDashboard.tsx are refactored to use the apiRequest utility.
The error handling provided by apiRequest (i.e., throwIfResNotOk) is now leveraged by these mutations.
The functionality of creating packages and sessions in SommelierDashboard.tsx remains correct and operational.
Code consistency for API calls is improved.