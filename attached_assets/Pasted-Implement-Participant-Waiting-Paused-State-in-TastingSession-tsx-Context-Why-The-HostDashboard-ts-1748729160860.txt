Implement Participant Waiting/Paused State in TastingSession.tsx
Context & Why:
The HostDashboard.tsx allows a host to control the sessionStatus (e.g., 'waiting', 'active', 'paused'). Currently, client/src/pages/TastingSession.tsx (the page participants use) does not seem to check or react to this server-side session status. This means participants might be able to proceed through tasting slides even if the host hasn't officially started the session or has paused it.

To ensure a synchronized group experience, the TastingSession.tsx page must fetch and respect the current sessionStatus. Participants should only be able to view and interact with tasting slides when the host has set the session to 'active'.

Objective (What):
Modify client/src/pages/TastingSession.tsx to:

Fetch the current session details, including its status.
Conditionally render content based on this status:
If sessionStatus is 'waiting' or 'paused', display an appropriate message to the participant (e.g., "Waiting for the host to start the session," or "The session is currently paused by the host").
If sessionStatus is 'active', allow the participant to view and interact with the tasting slides as normal.
If sessionStatus is 'completed', display a message indicating the session has ended.
Implementation Details (How):

Fetch Session Data in TastingSession.tsx:
The page already likely fetches slides and participant details based on sessionId and participantId from useParams().
Add a useQuery call to fetch the current session details from /api/sessions/:sessionId. This query should probably have a refetchInterval to get timely updates on sessionStatus.
TypeScript

// Inside TastingSession.tsx
const { sessionId } = useParams(); // or however sessionId is obtained

const { data: currentSession, isLoading: sessionDetailsLoading } = useQuery<Session & { packageCode?: string }>({
  queryKey: [`/api/sessions/${sessionId}`],
  enabled: !!sessionId,
  refetchInterval: 3000, // Refetch every 3 seconds to check status
});
Conditional Rendering Based on currentSession.status:
Before rendering the main slide content, check currentSession.status (Note: The Session type in @shared/schema.ts does not currently have a status field. This field needs to be added to the sessions table schema, Drizzle schema, and the storage.createSession and any session update methods on the backend. The HostDashboard.tsx manages sessionStatus in its local state but doesn't persist it to the backend. This backend part is a prerequisite.
Prerequisite Backend Change (Instruct AI to do this first if not done):
Add status: varchar("status", { length: 20 }).default('waiting').notNull() to the sessions table in shared/schema.ts and database-setup.sql.
Ensure POST /api/sessions sets this default.
Add a new backend API endpoint (e.g., PATCH /api/sessions/:sessionId/status) that the host can call from HostDashboard.tsx to update the session status in the database (e.g., body: { status: 'active' }).
Update storage.ts methods accordingly.
Frontend Conditional Rendering Logic:
TypeScript

// Inside TastingSession.tsx return()
if (sessionDetailsLoading) {
  return <LoadingOverlay isVisible={true} message="Loading session..." />;
}

if (!currentSession) {
  return <div>Error: Session not found.</div>;
}

// Assuming currentSession now has a 'status' field from the backend
if (currentSession.status === 'waiting') {
  return (
    <div className="min-h-screen bg-gradient-primary flex flex-col items-center justify-center text-white p-8">
      <Clock size={48} className="mb-4 text-purple-300" />
      <h2 className="text-2xl font-semibold mb-2">Session Starting Soon</h2>
      <p className="text-purple-200 text-center">Please wait for the host to begin the tasting.</p>
    </div>
  );
}

if (currentSession.status === 'paused') {
  return (
    <div className="min-h-screen bg-gradient-primary flex flex-col items-center justify-center text-white p-8">
      <Pause size={48} className="mb-4 text-yellow-300" />
      <h2 className="text-2xl font-semibold mb-2">Session Paused</h2>
      <p className="text-purple-200 text-center">The host has currently paused the tasting. Please wait.</p>
    </div>
  );
}

if (currentSession.status === 'completed') {
  // Navigate to completion screen or show completion message
  // setLocation(`/completion/<span class="math-inline">\{sessionId\}/</span>{participantId}`); // Or similar
  return (
     <div className="min-h-screen bg-gradient-primary flex flex-col items-center justify-center text-white p-8">
      <CheckCircle size={48} className="mb-4 text-green-300" />
      <h2 className="text-2xl font-semibold mb-2">Session Completed</h2>
      <p className="text-purple-200 text-center">This tasting session has ended. Thank you!</p>
    </div>
  );
}

if (currentSession.status !== 'active') {
    return <div>Waiting for session to become active...</div>; // Fallback for other unexpected statuses
}

// If active, render the normal tasting slide content:
// return ( ... your existing slide rendering logic ... ); 
Host Controls Update Session Status (HostDashboard.tsx):
The startSession, pauseSession, resetSession functions in HostDashboard.tsx currently only update local React state (sessionStatus).
These functions need to be modified to make API calls to the new PATCH /api/sessions/:sessionId/status endpoint to update the status in the database. Use useMutation for this.
Acceptance Criteria:

Backend:
The sessions table in shared/schema.ts and database-setup.sql has a status column (e.g., 'waiting', 'active', 'paused', 'completed'), defaulting to 'waiting'.
A new API endpoint (e.g., PATCH /api/sessions/:sessionId/status) exists for updating the session status.
HostDashboard.tsx uses this endpoint to update the session status when the host clicks start/pause/reset buttons.
Frontend (TastingSession.tsx):
TastingSession.tsx fetches the current session's details, including its status, and polls for updates.
If currentSession.status is 'waiting', a "Waiting for host..." message is displayed, and slide interaction is blocked.
If currentSession.status is 'paused', a "Session paused..." message is displayed, and slide interaction is blocked.
If currentSession.status is 'completed', a "Session completed" message or navigation to a completion page occurs.
Only if currentSession.status is 'active', the participant can view and interact with the current tasting slide.
The UI gracefully handles loading states for session data.