The current implementation of glossary popovers, while functional, can be visually disruptive and cluttered. The goal is to create a more integrated and "standard" UI pattern that provides helpful information without breaking the visual flow. By creating a single, expandable panel at the bottom of the question card, we can house both glossary definitions and receptive slider feedback in a clean, efficient, and beautiful way that feels cohesive and modern.

What Needs to Be Done:

Remove the auto-highlighting DynamicTextRenderer from all MCQ options to eliminate visual clutter.
Introduce a subtle, universal "info" icon or text hint at the top of question slides to indicate that glossary terms are available.
Implement a new expandable "Info Panel" at the bottom of the main card in MultipleChoiceQuestion.tsx and ScaleQuestion.tsx.
This panel will be the new destination for both the list of relevant glossary definitions and the receptive slider feedback text.
Fix the "un-centered" slider thumb bubble by making it an integrated part of this new info panel.
How to Implement (Code Changes & Guidance):

Refine Terminology Highlighting:

File: client/src/components/questions/MultipleChoiceQuestion.tsx.
Action:
Remove the <DynamicTextRenderer /> from the option.text and option.description rendering logic. Revert these to display plain text.
Keep the <DynamicTextRenderer /> for the main question.title and question.description, but modify it to use a less intrusive trigger styleâ€”perhaps just a subtle dotted underline without the icon.
Implement the Integrated "Info Panel":

Files: client/src/components/questions/MultipleChoiceQuestion.tsx and ScaleQuestion.tsx.
Action: Add a new collapsible section at the bottom of the main component card, inside the motion.div. Use <Collapsible> from ui/collapsible.tsx.
TypeScript

// Conceptual structure inside MultipleChoiceQuestion.tsx or ScaleQuestion.tsx

// ... [main question content] ...

<Collapsible open={isInfoPanelOpen} onOpenChange={setIsInfoPanelOpen}>
  <CollapsibleTrigger asChild>
    <Button variant="ghost" className="mt-4 w-full text-purple-300 hover:text-white">
      <Info size={16} className="mr-2" />
      <span>{isInfoPanelOpen ? 'Hide Info' : 'Show Info & Terms'}</span>
    </Button>
  </CollapsibleTrigger>
  <CollapsibleContent asChild>
      <motion.div initial={{...}} animate={{...}} exit={{...}} >
        {/* THE NEW HOME FOR GLOSSARY & SLIDER FEEDBACK */}
        <div className="mt-2 p-4 bg-black/20 rounded-lg border border-white/10">
           {/* ... Render glossary list and/or receptive slider text here ... */}
        </div>
      </motion.div>
  </CollapsibleContent>
</Collapsible>
Populate the Info Panel:

For Glossary:
Inside the question components, create a function that scans all text (title, description, options) to compile a unique list of glossary terms relevant to that specific slide.
Inside the CollapsibleContent, if this list is not empty, render a "Glossary" section with each term and its definition.
For Receptive Slider Feedback (Fixing the Glitch & Clipping):
File: client/src/components/questions/ScaleQuestion.tsx.
Action: Remove the logic that shows a floating bubble above the slider.
Instead, render the feedbackText (which you already have the logic for) inside the new Info Panel. This completely solves the clipping and "un-centered" bug by making the feedback part of the main content flow.
New Idea Integration: To make it even more dynamic, as the user slides, you can highlight one of the scale labels. For example, if the slider is closer to "Poor", the "Poor" label could glow slightly. You can achieve this by calculating the slider's percentage position and applying a conditional class.
Final Polish:

The Info Panel should have a beautiful entrance/exit animation (AnimatePresence).
The content within should be styled elegantly for readability, perhaps with small icons next to each glossary term definition.
Replit AI Guidance:
Refactor DynamicTextRenderer.tsx: Remove its usage from the options mapping within client/src/components/questions/MultipleChoiceQuestion.tsx. Modify its styling to use a more subtle trigger (e.g., just a dotted underline).
Implement the "Info Panel" UI: In both MultipleChoiceQuestion.tsx and ScaleQuestion.tsx, add a <Collapsible> section at the bottom of the main card.
Relocate Receptive Slider Feedback: In ScaleQuestion.tsx, move the rendering of the feedbackText from its current floating position into the new CollapsibleContent area. This is the fix for the bubble glitch and clipping.
Implement Glossary List in Panel: Inside the CollapsibleContent for both question types, add logic to find all unique, applicable glossary terms for the current slide and render them as a clean list of "Term: Definition".
Ensure the opening and closing of this panel is animated smoothly using Framer Motion's layout prop on the parent card and AnimatePresence on the content itself to create a fluid, non-jarring resizing effect. This is key to achieving a "powerful and focused" UI.