Update HostDashboard.tsx to Consume and Display Real Session Analytics
Context & Why:
The backend now has a new API endpoint, GET /api/sessions/:sessionId/analytics (implemented in Task 5), which provides detailed, aggregated analytics for a given tasting session. This includes overall session statistics and per-slide response summaries (e.g., option counts for multiple-choice, averages for scale questions).

Currently, the "Analytics" tab in client/src/pages/HostDashboard.tsx (around lines 330-375) displays placeholder information, hardcoded values (like '5m 23s' for active time), or very basic calculations (like allResponses.length which uses a disabled query).

To make the Host Dashboard truly useful, this "Analytics" tab must be updated to fetch data from the new /api/sessions/:sessionId/analytics endpoint and display these real, dynamic insights.

Objective (What):
Refactor the "Analytics" tab within client/src/pages/HostDashboard.tsx to:

Fetch data from the new /api/sessions/:sessionId/analytics backend endpoint using @tanstack/react-query.
Display the fetched aggregated analytics in a clear and meaningful way, replacing all placeholder and hardcoded values.
Implementation Details (How):

Modify Data Fetching in HostDashboard.tsx:

Locate the existing useQuery for allResponses (around line 41), which is currently disabled.
Change this query (or add a new one specifically for analytics data) to target the new endpoint:
TypeScript

// Assuming the analytics data structure matches the example from Prompt 5, define a type for it.
// You might need to create this type in @shared/schema.ts or locally.
interface SlideAnalytics {
  slideId: string;
  slidePosition: number;
  slideTitle: string;
  slideType: string;
  questionType?: string; // e.g., 'multiple_choice', 'scale'
  aggregatedData: any; // This will vary based on questionType
}

interface SessionAnalyticsData {
  sessionId: string;
  sessionName?: string;
  packageName?: string;
  totalParticipants: number;
  completedParticipants: number;
  averageProgressPercent: number;
  slidesAnalytics: SlideAnalytics[];
}

// ... inside HostDashboard component
const { 
  data: analyticsData, 
  isLoading: analyticsLoading, 
  error: analyticsError 
} = useQuery<SessionAnalyticsData>({
  queryKey: [`/api/sessions/${sessionId}/analytics`], // Use the new endpoint
  enabled: !!sessionId && sessionStatus === 'active', // Enable when session is active, or always if desired
  // refetchInterval: 10000, // Consider an appropriate refetch interval for analytics
});
Adjust the enabled condition as appropriate (e.g., you might want to fetch analytics even if the session is not 'active' to review past data, or only when 'active' for live updates).
Handle analyticsLoading and analyticsError states appropriately in the UI.
Update the "Analytics" Tab Content (around lines 330-375):

Remove all hardcoded values and placeholder logic.
Response Analytics Card:
"Total Responses": This can be derived from the analyticsData if the backend includes it, or by summing counts from slidesAnalytics. A more direct metric might be "Total Answered Questions across all Participants."
"Questions Answered (by at least one participant)": Iterate through analyticsData.slidesAnalytics and count unique question slides that have received responses.
"Completion Rate": Use analyticsData.averageProgressPercent or (analyticsData.completedParticipants / analyticsData.totalParticipants) * 100.
Session Insights Card:
"Active Time," "Average Session Time," "Engagement Rate": These metrics are more complex.
Active Time: If the backend doesn't provide this, it might need to be calculated based on session.startedAt and current time (if active) or session.completedAt. For simplicity, you might initially display "N/A" or a simpler metric.
Average Session Time / Engagement Rate: These often require more historical data or specific definitions not yet implemented in the backend for getAggregatedSessionAnalytics. For now, focus on displaying what the new endpoint does provide. It's okay to simplify or remove these if the backend doesn't support them yet.
New Section: Per-Slide Analytics Breakdown:
Iterate over analyticsData.slidesAnalytics. For each slideAnalytic object:
Display the slideTitle and slidePosition.
Based on questionType:
'multiple_choice'/'single_choice': Display the optionsSummary (e.g., "Dark fruits: 12 votes (80%)"). Consider a simple bar chart or list. Display notesSubmittedCount.
'scale': Display averageScore, minScore, maxScore. Optionally, visualize the scoreDistribution (e.g., simple text "5: 2, 6: 1..." or a bar chart).
Style this section clearly to separate analytics for each question. Use Card components or similar for good visual structure.
Loading and Error States:

Ensure that while analyticsLoading is true, a suitable loading indicator is shown within the "Analytics" tab.
If analyticsError occurs, display a user-friendly error message.
Acceptance Criteria:

The "Analytics" tab in HostDashboard.tsx now fetches data from /api/sessions/:sessionId/analytics.
All hardcoded or placeholder analytics values are replaced with dynamic data from the API.
The dashboard clearly displays:
Overall session statistics like total participants and completion/progress metrics derived from analyticsData.
For each question slide, aggregated response data is shown (e.g., option counts for multiple-choice, average scores for scale questions).
Loading and error states for the analytics data are handled gracefully.
The UI for displaying these analytics is clear and understandable.