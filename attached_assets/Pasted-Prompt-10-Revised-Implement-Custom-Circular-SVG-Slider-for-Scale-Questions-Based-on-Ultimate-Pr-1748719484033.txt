Prompt 10 (Revised): Implement Custom Circular SVG Slider for Scale Questions (Based on "Ultimate Prompt" F-4)
Context & Why:
The "Ultimate Wine Tasting Platform" prompt detailed a "Premium circular slider" under "F-4: Next-Level Question Components" for scale-based questions, emphasizing a "magical experience" with smooth animations and haptic feedback. The current client/src/components/questions/ScaleQuestion.tsx uses a standard linear Slider. To elevate the UI/UX, we will now implement the custom circular SVG slider as specified in the "Ultimate Prompt," aiming for a crisp, beautiful, elegant, and powerful interactive element.

Objective (What):
Refactor the client/src/components/questions/ScaleQuestion.tsx component to implement the custom circular SVG slider as detailed in the "Ultimate Wine Tasting Platform (React + Express)" prompt (refer to the section "F-4: Next-Level Question Components" and the detailed JSX example for ScaleQuestion.jsx). This involves replacing the current linear slider with an SVG-based circular interface that supports drag interactions for precise value selection.

Implementation Details (How):

Strictly Follow "Ultimate Prompt" Example:

The AI must refer to the exact JSX structure, styling, and logic provided in the ScaleQuestion.jsx example within the "F-4: Next-Level Question Components" section of the "Ultimate Prompt" document. This example includes:
An SVG with a viewBox of 0 0 300 300.
A background circle (<circle className="ring" ... />).
A progress arc (<motion.circle className="progress-ring" ... />) that uses strokeDasharray and Framer Motion's transform and pathLength to visualize the selected value. The stroke should use the provided gradient (url(#gradient)).
A draggable thumb (<motion.div className="thumb" ... />) positioned using trigonometry based on the drag angle.
Central text (<motion.p className="value" ... />) to display the current value, with scaling animation during drag.
Min/Max labels (<p className="min-label"> and <p className="max-label">) positioned around the circle.
Integration with useHaptics for tactile feedback on drag start, value change, and drag end.
Framer Motion for smooth animations on the progress arc and thumb.
SVG Structure and Styling:

Use the same class names (ring, progress-ring, thumb, value, min-label, max-label) as in the prompt's example for consistency.
Ensure the SVG and its elements are styled to be visually appealing, using the application's theme colors (especially the --gradient-button or similar for the progress arc).
Pay close attention to the stroke-width of the circles to make them prominent but not overwhelming.
Drag Interaction and Value Calculation:

Implement the onPan (from usePanGesture within Framer Motion, as used in the example) or onDrag handler for the thumb.
Calculate the angle of the drag gesture relative to the center of the circle.
Map this angle to a value within the range of question.scale_min and question.scale_max. The prompt's example provides the crucial logic for this angle-to-value conversion.
Update a local state (localValue) during the drag.
Framer Motion Integration:

Use motion components for the progress arc, thumb, and value text to enable smooth animations (e.g., scaling the value text on drag).
Use appropriate transition props for the animations.
Haptic Feedback:

Use the useHaptics hook to trigger haptic feedback on dragStart, each significant change in localValue, and dragEnd, as demonstrated in the prompt's example.
Props and Data Flow:

Ensure the component correctly receives and uses the question prop (specifically question.scale_min, question.scale_max, and question.scale_labels for min/max text) and the value and onChange props for controlled component behavior. The onChange should be called with the final localValue when the drag ends.
Remove Linear Slider: Completely remove the shadcn/ui linear Slider and any associated state or logic.

Key Elements to Get Right (Referencing Prompt Example):

SVG viewBox and Size: viewBox="0 0 300 300" and appropriate className for sizing.
Background Ring: <circle className="ring" cx="150" cy="150" r="135" ... />.
Progress Ring: `<motion.circle className="progress-ring" cx="150" cy="150" r="135" ... strokeDasharray and transform properties dynamically set.
Gradient: <linearGradient id="gradient" ...>.
Draggable Thumb: <motion.div className="thumb" style={{ x, y }} drag dragConstraints={{ radius: 135 }} dragElastic={0} onPan ... /> (note: onPan is likely the correct gesture handler from the example, not just onDrag).
Value Display: <motion.p className="value" style={{ scale: isDragging ? 1.2 : 1 }} >{Math.round(localValue)}</motion.p>.
Labels: <p className="min-label" style={{ x: 150 - 110, y: 150 + 5 }}>{question.scale_labels?.[0]}</p> and similar for the max label.
Angle Calculation: The core logic to convert touch/mouse position to an angle and then to a value within the scale range.
Acceptance Criteria:

The ScaleQuestion.tsx component now renders a custom circular SVG slider, visually matching the style and structure described in the "Ultimate Prompt" example.
Users can drag a thumb around the circle to select a value within the range specified by question.scale_min and question.scale_max.
The progress of the circle visually reflects the selected value, using the gradient.
The selected numerical value is displayed in the center and animates (scales) during interaction.
The min and max labels from question.scale_labels are correctly positioned and displayed.
Haptic feedback occurs on interaction start, value change, and end.
Framer Motion is used for smooth visual transitions.
The component correctly uses the provided props (question, value, onChange) and updates the parent component with the final selected value via onChange.
By providing this detailed prompt, emphasizing the need to strictly adhere to the "Ultimate Prompt's" example code, we aim to get a high-quality circular slider implementation that aligns with your vision for a beautiful and elegant UI.