Externalize Database Connection String
Context & Why:
The PostgreSQL database connection string, which includes sensitive credentials (username and password), is currently hardcoded directly into the server/db.ts file (around line 6). Committing credentials into source code is a significant security vulnerability. If the code is ever exposed publicly or shared, these credentials would be compromised. The best practice is to store such sensitive information in environment variables, which are then accessed by the application at runtime.

Objective (What):
Modify server/db.ts to retrieve the PostgreSQL connection string from an environment variable (e.g., DATABASE_URL) instead of having it hardcoded.

Implementation Details (How):

Modify server/db.ts:
Locate the line where the connectionString is defined (around line 6).
Change it to read from process.env.DATABASE_URL.
TypeScript

// Before:
// const connectionString = `postgresql://postgres.byearryckdwmajygqdpx:Wineman25@aws-0-us-east-1.pooler.supabase.com:5432/postgres`;

// After:
const connectionString = process.env.DATABASE_URL;
Add Robust Error Handling for Missing Environment Variable:
Immediately after attempting to read process.env.DATABASE_URL, add a check to ensure the environment variable is actually set. If it's not, the application cannot connect to the database and should log a fatal error and exit.
TypeScript

if (!connectionString) {
  console.error("FATAL ERROR: DATABASE_URL environment variable is not set. The application cannot connect to the database. Please ensure DATABASE_URL is configured in your Replit Secrets or environment.");
  process.exit(1); // Exit the process with an error code
}
Configure Environment Variable in Replit:
You (the user) will need to ensure that a Replit Secret named DATABASE_URL is created (or updated if it already exists for another purpose).
This secret must contain the full, correct Supabase direct PostgreSQL connection string that was previously hardcoded (e.g., postgresql://postgres.username:[YOUR-PASSWORD]@aws-0-region.pooler.supabase.com:5432/postgres). Remind the AI to not log or expose the actual connection string in its output.
Acceptance Criteria:

The server/db.ts file no longer contains any hardcoded database credentials or connection strings.
The server application successfully retrieves the database connection string from the DATABASE_URL environment variable at runtime.
The application can still connect to and interact with the Supabase PostgreSQL database using the connection string from the environment variable.
If the DATABASE_URL environment variable is not set or is empty, the server application logs a clear error message and exits gracefully, rather than attempting to run with an undefined connection string.