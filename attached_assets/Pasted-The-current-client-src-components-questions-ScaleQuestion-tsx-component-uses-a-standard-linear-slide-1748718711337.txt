The current client/src/components/questions/ScaleQuestion.tsx component uses a standard linear slider from shadcn/ui. To make this interaction more visually engaging, thematic to wine tasting, and align with the project's vision for a premium user experience, we want to add an animation of a wine glass filling up as the user increases the slider's value. This provides immediate, delightful visual feedback.

Objective (What):
Modify client/src/components/questions/ScaleQuestion.tsx to include an SVG animation of a wine glass filling with "wine." The fill level of the wine in the glass should directly correspond to the current value of the linear slider.

Implementation Details (How):

Introduce SVG Wine Glass Element:

Incorporate an SVG element representing a wine glass within the ScaleQuestion.tsx component. This could be placed alongside or above/below the existing linear slider.
The SVG should be designed such that the "wine" (liquid part) can be animated separately from the glass outline. This might involve:
A path for the glass outline.
A separate path or shape for the wine liquid.
Using an SVG <clipPath> or <mask> where the mask's y position or height is animated to reveal the wine liquid.
SVG Source (Guidance for AI): You can either:
Instruct the AI to generate a simple, stylized SVG wine glass.
Or, if you have a preferred SVG wine glass icon (perhaps from lucide-react or a custom asset from the "Ultimate Prompt's" vision like the WineGlassIcon mentioned for the Gateway, or the WineGlassLoader), instruct the AI to adapt or use that as a base. A simple path-based SVG is likely easiest to animate the fill for.
Animate Wine Fill Level with Framer Motion:

The fill level of the wine in the SVG glass needs to be animated. This animation should be driven by the value prop of the ScaleQuestion component (which ranges from question.scale_min to question.scale_max).
Mapping Value to Fill: Calculate a fill percentage (0% to 100%) based on the current value relative to question.scale_min and question.scale_max.
fillPercentage = ((value - question.scale_min) / (question.scale_max - question.scale_min)) * 100;
Animation Technique:
Use Framer Motion (motion.rect, motion.path, or by animating attributes of an SVG element like the y or height of a clipping rectangle).
For example, if using a clipping rectangle for the wine fill:
JavaScript

// Conceptual SVG structure
<svg viewBox="0 0 100 150">
  <defs>
    <clipPath id="wineFillClip">
      <motion.rect 
        x="startX" 
        // Animate 'y' based on fillPercentage (from top down)
        // Or animate 'height' based on fillPercentage (from bottom up)
        initial={{ y: /* full height for 0% fill */ }}
        animate={{ y: /* calculated y for current fillPercentage */ }}
        width="wineWidth"
        height="maxWineHeight" 
      />
    </clipPath>
  </defs>
  <path d="M...glass_outline..." fill="rgba(255,255,255,0.1)" stroke="rgba(255,255,255,0.3)" />
  <motion.path 
    d="M...wine_liquid_shape..." 
    fill="url(#wine-gradient)" // Or a solid color like a deep red/purple
    clipPath="url(#wineFillClip)"
  />
</svg>
Ensure the animation is smooth (e.g., use a gentle transition with Framer Motion).
Styling and Theme:

The wine glass SVG and the "wine" fill color should align with the application's theme (dark purple gradients, premium feel, as described in client/src/index.css and the "Ultimate Prompt").
Consider using one of the theme's gradient colors (like --gradient-button or a new wine-specific one) for the wine fill.
Layout:

Position the animated wine glass attractively relative to the existing linear slider and question text. It should complement, not clutter, the component.
Acceptance Criteria:

The ScaleQuestion.tsx component displays an SVG wine glass animation.
As the user adjusts the linear slider, the fill level of the wine in the SVG glass animates in real-time, directly corresponding to the slider's value (e.g., slider at min = empty glass, slider at max = full glass).
The animation is smooth and visually appealing.
The style of the wine glass and the fill color are consistent with the application's overall dark, premium theme.
The existing functionality of the linear slider (value reporting via onChange) remains intact.