How to Implement
File to Modify: client/pages/PackageEditor.tsx
1. Update the handleAddSlide Function:
Locate the handleAddSlide handler (around line 153). Modify its signature and logic to accept and use the sectionType.
FROM:
const handleAddSlide = (wineId: string, template: any) => {
  // ... old logic
};
Use code with caution.
TypeScript
TO:
const handleAddSlide = (wineId: string, sectionType: 'intro' | 'deep_dive' | 'ending', template: any) => {
  const wineSlides = slides.filter(s => s.packageWineId === wineId);
  const nextPosition = (wineSlides.length > 0 ? Math.max(...wineSlides.map(s => s.position)) : 0) + 1;

  const slideData = {
    packageWineId: wineId,
    position: nextPosition,
    type: template.type,
    section_type: sectionType, // Use the passed-in sectionType
    payloadJson: {
      title: template.name,
      description: template.description || '',
      ...(template.payload_template || {}),
    },
  };
  createSlideMutation.mutate(slideData);
};
Use code with caution.
TypeScript
2. Update the Sidebar JSX:
Find the AnimatePresence block for the expanded wine card (around line 407). Replace the entire content inside that motion.div with the new, section-based structure below. This is the core UI change.
REPLACE THIS:
// The old block started with <div className="pt-2 pl-4 ...">
// and contained the simple list of slides and the single list of templates.
// Delete this entire block.
Use code with caution.
Tsx
WITH THIS:
<motion.div initial={{ height: 0, opacity: 0 }} animate={{ height: 'auto', opacity: 1 }} exit={{ height: 0, opacity: 0 }} className="pl-4 mt-2 border-l-2 border-white/10 ml-5 space-y-4 py-2">
  {Object.entries(sectionDetails).map(([key, { title, icon }]) => {
    const sectionSlides = wineSlides.filter(s => s.section_type === key);
    return (
      <div key={key}>
        <div className="flex items-center justify-between mb-1">
          <h4 className="text-sm font-semibold text-white/90 flex items-center">{icon}<span className="ml-2">{title}</span></h4>
          <Popover>
            <PopoverTrigger asChild>
              <Button size="icon" variant="ghost" className="h-6 w-6 text-purple-300 hover:bg-purple-500/20 hover:text-purple-200">
                <Plus className="h-4 w-4" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-56 p-1 bg-gray-900/80 border-gray-700 backdrop-blur-md">
              <div className="space-y-1">
                {slideTemplates.map(template => (
                  <Button
                    key={template.id}
                    variant="ghost"
                    className="w-full justify-start font-normal h-8 text-white/80"
                    onClick={() => handleAddSlide(wine.id, key as any, template)}
                  >
                    <PlusCircle className="mr-2 h-4 w-4 text-purple-400" />
                    {template.name}
                  </Button>
                ))}
              </div>
            </PopoverContent>
          </Popover>
        </div>
        <div className="pl-2 space-y-1">
          {sectionSlides.length > 0 ? (
            sectionSlides.map(slide => (
              <div key={slide.id} className={`p-2 rounded-md cursor-pointer transition-colors ${activeSlideId === slide.id ? 'bg-purple-600/30' : 'hover:bg-white/10'}`} onClick={() => setActiveSlideId(slide.id)}>
                <p className="text-sm font-medium text-white truncate">{(slide.payloadJson as any)?.title || 'Untitled Slide'}</p>
              </div>
            ))
          ) : (
            <p className="text-xs text-white/50 italic px-2 py-1">No slides in this section.</p>
          )}
        </div>
      </div>
    );
  })}
</motion.div>
Use code with caution.
Tsx
3. Add a Helper Constant:
At the top of the PackageEditor.tsx file (outside the component), add this helper object to store the section titles and icons.
// Add this near the top of client/pages/PackageEditor.tsx
const sectionDetails = {
  intro: { title: 'Intro', icon: 'üé¨' },
  deep_dive: { title: 'Deep Dive', icon: 'ü§î' },
  ending: { title: 'Ending', icon: 'üèÅ' },
};
Use code with caution.
TypeScript
4. Add Popover Imports:
Ensure the Popover components are imported from shadcn/ui.
// At the top of client/pages/PackageEditor.tsx
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
Use code with caution.
TypeScript
These targeted changes will deliver the exact UI and functionality you've requested, creating a more professional and intuitive editor while keeping our codebase clean and data-driven.