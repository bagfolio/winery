Context & Why
Following our successful database migration, the package_wines table can now store rich, structured data such as vintage, region, grape varietals, and the sommelier's expected tasting characteristics. This data is the foundation for providing valuable analytics and comparative feedback to tasters. This task bridges the gap between our powerful backend and the sommelier's user interface, directly addressing a core client requirement for creating detailed, customizable tasting experiences.
What Needs to Be Done
Expand the WineForm state in WineModal.tsx to include all new fields from the package_wines table schema.
Add UI form controls within the modal for editing these new fields (vintage, region, producer, alcohol content, etc.).
Implement a dynamic editor for the expectedCharacteristics JSONB field, allowing sommeliers to define expert ratings.
Ensure the handleSubmit function correctly collects all new data from the form and passes it to the onSave callback.
How to Implement
File to Modify: client/src/components/WineModal.tsx
Update WineForm Interface and Initial State:
Modify the WineForm interface (around line 17) to match the full package_wines schema.
Update the useState<WineForm> hook (around line 196) to initialize all new fields from the wine prop or with default values.
// Example of updated interface (ensure all fields are present)
interface WineForm {
  wineName: string;
  wineDescription: string;
  wineImageUrl: string;
  position: number;
  wineType: string; // Add this
  vintage: number | null; // Add this
  region: string; // Add this
  producer: string; // Add this
  grapeVarietals: string[]; // Already exists
  alcoholContent: string; // Add this
  expectedCharacteristics: Record<string, any>; // Already exists
}

// Example of updated useState hook
const [wineForm, setWineForm] = useState<WineForm>({
  wineName: wine?.wineName || '',
  wineDescription: wine?.wineDescription || '',
  wineImageUrl: wine?.wineImageUrl || '',
  position: wine?.position || 1,
  wineType: wine?.wineType || 'red', // Add default
  vintage: wine?.vintage || new Date().getFullYear() - 2, // Add default
  region: wine?.region || '', // Add default
  producer: wine?.producer || '', // Add default
  grapeVarietals: wine?.grapeVarietals || [],
  alcoholContent: wine?.alcoholContent || '13.5%', // Add default
  expectedCharacteristics: wine?.expectedCharacteristics || {}
});
Use code with caution.
TypeScript
Add Form Fields to the "Details" Tab:
Inside the <TabsContent value="details"> section, locate the grid layout (around line 370).
Add <Input> components for producer and alcoholContent.
Add a <Select> component for wineType using the predefined wineTypes constant.
Ensure all new inputs are wired to the wineForm state using value and onChange handlers, similar to the existing fields.
Implement the "Characteristics" Tab Editor:
Locate the <TabsContent value="characteristics"> section (around line 538).
This tab is for editing the expectedCharacteristics field. It should allow the sommelier to define the "correct" answers for quantitative questions.
Use the wineCharacteristics constant (defined around line 148) to dynamically render an editor for each characteristic.
For each characteristic:
Render a <Card> containing the characteristic name and category.
If scaleType is 'numeric', render an <Input type="number">.
If scaleType is 'descriptive', render a <Select> with the options.
If scaleType is 'boolean', render a <Switch>.
The onChange handler for these inputs should update the expectedCharacteristics object in the wineForm state. Use the addCharacteristic helper function as a reference.
Verify handleSubmit Function:
No changes should be needed in the handleSubmit function itself (around line 217), as it already passes the entire wineForm state object. Just ensure that the state is being correctly updated by your new form fields.
Guidance for the Target AI
Focus on consistency. Reuse existing shadcn/ui components like <Card>, <Label>, <Input>, and <Select> to maintain the visual style.
The implementation for grapeVarietals is a good pattern to follow for managing arrays of strings or complex objects.
Ensure the expectedCharacteristics editor is user-friendly. The layout should be a grid of cards, making it easy for the sommelier to see and edit all characteristics at once.
Pay close attention to the data types. vintage should be handled as a number, and expectedCharacteristics as an object.