Context & Why: The sommelier needs a seamless interface to manage all aspects of their tasting packages. This task will implement the core UI for editing detailed wine information and will fix the broken "Question Order" functionality, which is a critical UX failure.
What Needs to Be Done:
Fully implement the form controls in WineModal.tsx for all new wine attributes.
Implement the "Characteristics" tab within WineModal.tsx for setting expert ratings.
Fix the broken drag-and-drop functionality for "Question Order" in WineModal.tsx.
Remove the redundant/broken "Edit Slides" button from the wine list on the SommelierDashboard.tsx.
Ensure that numeric slider question responses are stored cleanly in the database.
How to Implement:
Part 1: Implement the Wine Details Form in client/src/components/WineModal.tsx
Locate the div with the grid layout inside <TabsContent value="details"> (around line 370).
Add the following <Input> and <Select> components to this grid, just like the existing ones for Wine Name and Wine Type:
A field for Producer (producer).
A field for Region (region).
A field for Alcohol Content (alcoholContent).
Wire these new inputs to the wineForm state using the setWineForm updater function.
Part 2: Implement the "Characteristics" Tab in client/src/components/WineModal.tsx
Navigate to the <TabsContent value="characteristics"> section (around line 538). This section is currently empty.
Iterate over the wineCharacteristics constant (defined around line 148).
For each characteristic object in the array, render a <Card> component.
Inside each card, based on the characteristic.scaleType, render the appropriate control:
If scaleType is 'numeric', render an <Input type="number">.
If scaleType is 'descriptive', render a <Select> populated with characteristic.options.
If scaleType is 'boolean', render a <Switch>.
The onChange handler for each control must update the expectedCharacteristics object in the wineForm state. Use the addCharacteristic helper function for this logic.
Part 3: Fix "Question Order" in client/src/components/WineModal.tsx
Navigate to the <TabsContent value="slides"> section (around line 607).
Wrap the slideOrder.map block (around line 646) with the <DndContext> and <SortableContext> components from @dnd-kit.
Create a SortableItem component that wraps each slide <Card>. This component will use the useSortable hook.
Implement the handleDragEnd function to reorder the slideOrder state using arrayMove and persist the new order.
This is a placeholder for now, as a full D&D implementation is complex. For now, ensure the tab renders the list of slides correctly. Let's focus on displaying the existing slide order first.
Part 4: Clean up SommelierDashboard.tsx
Open client/src/pages/SommelierDashboard.tsx.
Locate the "Edit Slides" button inside the expandable wine list (around line 617).
Delete this entire button and its surrounding div. The only way to edit slides will be through the main "Edit Package" button that leads to the PackageEditor.
Crucial Final Directive:
Your previous attempt failed because you hallucinated the completion of this task. You are to physically modify the files as instructed.