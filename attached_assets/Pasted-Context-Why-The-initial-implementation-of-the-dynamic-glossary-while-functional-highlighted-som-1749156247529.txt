Context & Why:
The initial implementation of the dynamic glossary, while functional, highlighted some UX challenges. Highlighting every instance of a term can be visually distracting, and tooltips can be clipped by the viewport. To create the "beautiful, engaging, sleek" UI the client desires, we need a smarter system that highlights terms judiciously and presents definitions in a polished, context-aware popover that feels like a core part of the app experience.

What Needs to Be Done:

Refactor the DynamicTextRenderer to only highlight the first occurrence of any given glossary term within a block of text.
Replace the current <Tooltip> implementation in TerminologyTooltip.tsx with <Popover> from client/src/components/ui/popover.tsx.
Style the <PopoverContent> to be visually appealing and brand-aligned.
Use the Popover's collision detection to ensure it repositions itself to stay within the viewport, solving the clipping issue.
How to Implement (Code Changes & Guidance):

Refine Text Rendering Logic (client/src/components/ui/DynamicTextRenderer.tsx):

Action: Update the logic to prevent duplicate highlighting.
Implementation Sketch:
TypeScript

// Inside DynamicTextRenderer.tsx
// ...
const processedKeys = new Set<string>(); // Keep track of terms already rendered as tooltips in this block
// ... inside the mapping logic
// ...
const key = term.toLowerCase().replace(/\s+/g, '_');
if (processedKeys.has(key)) {
  return part; // If already shown, just render the plain text
}
processedKeys.add(key);
return <TerminologyTooltip key={`<span class="math-inline">\{index\}\-</span>{key}`} termKey={key}>{part}</TerminologyTooltip>;
// ...
This ensures that if "Aroma" appears three times in a paragraph, only the first instance becomes interactive.
Upgrade Tooltip to an Engaging Popover (client/src/components/ui/TerminologyTooltip.tsx):

Action: Replace the Radix Tooltip primitives with Popover primitives. This is the core change to fix the clipping and improve the UI.
File: client/src/components/ui/TerminologyTooltip.tsx.
Implementation Sketch:
TypeScript

// client/src/components/ui/TerminologyTooltip.tsx
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
// ... other imports

// ... component function signature ...
// ... getTermDefinition logic ...

return (
  <Popover>
    <PopoverTrigger asChild className={cn(className)}>
      {/* This is the underlined text or icon from before */}
      {triggerElement}
    </PopoverTrigger>
    {/* The PopoverContent will automatically avoid screen edges */}
    <PopoverContent 
      sideOffset={5} 
      className="max-w-xs w-screen bg-gradient-to-br from-gray-900 to-black border-purple-500/30 text-foreground shadow-2xl p-4"
      // Framer Motion for animation
      asChild 
    >
      <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.95 }}>
        {/* Beautifully styled definition */}
        <h4 className="font-bold text-lg text-purple-300 mb-2">{termData.term}</h4>
        {termData.category && <Badge variant="secondary" className="mb-3">{termData.category}</Badge>}
        <p className="text-sm text-white/90 leading-relaxed">{termData.definition}</p>
        {termData.variations && <p className="text-xs text-white/50 mt-4">Also known as: {termData.variations.join(', ')}</p>}
      </motion.div>
    </PopoverContent>
  </Popover>
);
Refine Slider Bubble (Addressing the separate bug):

This is a separate issue from the glossary but related to popovers. You asked if you should wait. Yes, let's fix the glossary popover first. The principles we apply here (using a collision-aware primitive like Radix Popover) will inform how we can fix the slider's value display later. We can create a dedicated task for the slider bubble fix after this.
Replit AI Guidance:
Refactor DynamicTextRenderer.tsx: Implement logic using a Set to track already-rendered terms, ensuring each unique term is highlighted only once per component instance.
Upgrade TerminologyTooltip.tsx to TerminologyPopover.tsx (or update in place): Replace all <Tooltip* /> components with their <Popover* /> counterparts from client/src/components/ui/popover.tsx.
Style the <PopoverContent>: Apply a modern, sleek design. Use the app's color palette (bg-gradient-card, etc.), add padding, improve typography, and include all relevant fields from the glossary (term, definition, category, variations).
Animate the Popover: Use Framer Motion on the PopoverContent (with the asChild prop) to add a subtle scale/fade-in animation.
Ensure the new popover system is used by the DynamicTextRenderer and test it on text blocks at the top and bottom of the screen to verify that it repositions itself correctly and is never clipped by the viewport.