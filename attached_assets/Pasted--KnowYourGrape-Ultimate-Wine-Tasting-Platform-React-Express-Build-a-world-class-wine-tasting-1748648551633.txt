üç∑ KnowYourGrape - Ultimate Wine Tasting Platform (React + Express)
Build a world-class wine tasting platform that delivers an absolutely magical experience for wine enthusiasts. This app should feel like having a personal sommelier in your pocket, with buttery-smooth animations, delightful haptic feedback, and zero data loss even in a wine cellar with spotty connection.
üöÄ Project Vision
Create a wine tasting experience so smooth and delightful that users will choose it over paper forms every time. The app should feel premium, responsive, and intelligent - anticipating user needs and recovering gracefully from any network issues.
üèóÔ∏è Technical Architecture
Tech Stack:
javascript// Frontend
- React 18 with Hooks
- React Router v6 for navigation  
- Framer Motion for 60fps animations
- Tailwind CSS 3 for styling
- shadcn/ui for base components
- Vite for lightning-fast builds
- PWA with service workers for offline

// Backend  
- Express.js with TypeScript
- Supabase for database + storage
- Express Sessions with Redis
- Socket.io for real-time updates
- Node-cron for ETL jobs
- Helmet for security

// Testing & Quality
- Cypress for E2E tests
- Storybook for components
- React Testing Library
- Lighthouse CI for performance
Database Schema (EXACTLY these 5 tables):
sql-- 1. Packages table
CREATE TABLE packages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code VARCHAR(10) UNIQUE NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. Slides table (ALL content lives here)
CREATE TABLE slides (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  package_id UUID REFERENCES packages(id) ON DELETE CASCADE,
  position INTEGER NOT NULL,
  type VARCHAR(50) NOT NULL CHECK (type IN ('question', 'media', 'interlude')),
  payload_json JSONB NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Sessions table
CREATE TABLE sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  package_id UUID REFERENCES packages(id) ON DELETE CASCADE,
  started_at TIMESTAMPTZ DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  active_participants INTEGER DEFAULT 0
);

-- 4. Participants table  
CREATE TABLE participants (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID REFERENCES sessions(id) ON DELETE CASCADE,
  email VARCHAR(255),
  display_name VARCHAR(100) NOT NULL,
  is_host BOOLEAN DEFAULT FALSE,
  progress_ptr INTEGER DEFAULT 0,
  last_active TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 5. Responses table
CREATE TABLE responses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  participant_id UUID REFERENCES participants(id) ON DELETE CASCADE,
  slide_id UUID REFERENCES slides(id) ON DELETE CASCADE,
  answer_json JSONB NOT NULL,
  answered_at TIMESTAMPTZ DEFAULT NOW(),
  synced BOOLEAN DEFAULT TRUE,
  UNIQUE(participant_id, slide_id)
);

-- Performance indexes
CREATE INDEX idx_packages_code ON packages(code);
CREATE INDEX idx_slides_package_position ON slides(package_id, position);
CREATE INDEX idx_participants_session ON participants(session_id);
CREATE INDEX idx_participants_email_session ON participants(email, session_id);
CREATE INDEX idx_responses_participant ON responses(participant_id);
CREATE INDEX idx_responses_synced ON responses(synced) WHERE synced = false;
üé® Enhanced Design System
Color Palette with Depth:
css:root {
  /* Primary gradients */
  --gradient-primary: linear-gradient(135deg, #581c87 0%, #1e1b4b 50%, #000000 100%);
  --gradient-card: linear-gradient(135deg, rgba(88, 28, 135, 0.2) 0%, rgba(30, 27, 75, 0.2) 100%);
  --gradient-button: linear-gradient(135deg, #7c3aed 0%, #581c87 100%);
  
  /* Glassmorphism */
  --glass-bg: rgba(88, 28, 135, 0.1);
  --glass-border: rgba(147, 51, 234, 0.2);
  --glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  
  /* Semantic colors */
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;
  
  /* Text hierarchy */
  --text-primary: rgba(255, 255, 255, 1);
  --text-secondary: rgba(255, 255, 255, 0.8);
  --text-tertiary: rgba(255, 255, 255, 0.6);
  --text-disabled: rgba(255, 255, 255, 0.4);
}
Micro-interactions & Animations:
javascript// Sophisticated haptic patterns
const hapticPatterns = {
  success: [10, 50, 10, 50, 20], // Double tap + hold
  error: [50, 100, 50], // Strong buzz
  warning: [20, 40, 20], // Gentle double tap
  selection: [10], // Light tap
  navigation: [5, 10, 5], // Subtle transition
  milestone: [20, 40, 20, 40, 60], // Celebration pattern
};

// Delightful animations
const animations = {
  // Slide transitions with spring physics
  slideIn: {
    initial: { x: 300, opacity: 0 },
    animate: { 
      x: 0, 
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 30 }
    },
    exit: { x: -300, opacity: 0 }
  },
  
  // Card interactions
  cardHover: {
    scale: 1.02,
    transition: { type: "spring", stiffness: 400 }
  },
  
  // Success celebration
  successPulse: {
    scale: [1, 1.05, 0.95, 1],
    transition: { times: [0, 0.2, 0.4, 1] }
  },
  
  // Loading shimmer
  shimmer: {
    backgroundPosition: ["200% 0", "-200% 0"],
    transition: { duration: 1.5, repeat: Infinity }
  }
};
üî• Enhanced Feature Implementation
F-1: Premium Package Gateway
jsx// client/src/pages/Gateway.jsx
function Gateway() {
  const [scanMode, setScanMode] = useState('camera');
  const [code, setCode] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  
  return (
    <motion.div 
      className="min-h-screen bg-gradient-primary"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      {/* Animated wine glass logo */}
      <motion.div
        className="pt-20 flex justify-center"
        animate={{ 
          rotate: [0, 5, -5, 0],
          scale: [1, 1.05, 1]
        }}
        transition={{ duration: 4, repeat: Infinity }}
      >
        <WineGlassIcon className="w-24 h-24 text-white/80" />
      </motion.div>
      
      {/* Smart QR Scanner with fallback */}
      <AnimatePresence mode="wait">
        {scanMode === 'camera' ? (
          <motion.div key="scanner" {...animations.slideIn}>
            <QRScanner
              onScan={handleCodeScanned}
              onError={() => setScanMode('manual')}
              className="rounded-3xl overflow-hidden"
            />
            <button onClick={() => setScanMode('manual')}>
              Type code instead
            </button>
          </motion.div>
        ) : (
          <motion.div key="manual" {...animations.slideIn}>
            <CodeInput
              value={code}
              onChange={setCode}
              onSubmit={handleCodeSubmit}
              maxLength={6}
              autoComplete="off"
              className="text-6xl tracking-widest"
              placeholder="ABC123"
            />
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Real-time validation feedback */}
      {isValidating && <ValidationLoader />}
    </motion.div>
  );
}

// Intelligent code input with haptics
function CodeInput({ value, onChange, onSubmit, ...props }) {
  const handleChange = (e) => {
    const newValue = e.target.value.toUpperCase();
    if (newValue !== value) {
      triggerHaptic('selection');
      onChange(newValue);
    }
    
    // Auto-submit when complete
    if (newValue.length === 6) {
      triggerHaptic('success');
      onSubmit(newValue);
    }
  };
  
  return (
    <div className="relative">
      <input
        {...props}
        value={value}
        onChange={handleChange}
        className="bg-glass-bg backdrop-blur-xl border-2 border-glass-border
                   rounded-2xl px-8 py-6 text-center text-white
                   focus:border-purple-400 focus:ring-4 focus:ring-purple-400/20
                   transition-all duration-300"
      />
      {/* Character counter dots */}
      <div className="flex justify-center gap-2 mt-4">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className={`w-2 h-2 rounded-full ${
              i < value.length ? 'bg-purple-400' : 'bg-white/20'
            }`}
            animate={i < value.length ? { scale: [1, 1.2, 1] } : {}}
          />
        ))}
      </div>
    </div>
  );
}
F-2: Bulletproof Session Resume with Offline Support
javascript// client/src/hooks/useSessionPersistence.js
export function useSessionPersistence() {
  const [syncStatus, setSyncStatus] = useState('synced');
  const [offlineQueue, setOfflineQueue] = useState([]);
  
  // Persist to IndexedDB for offline support
  const saveResponse = async (slideId, answer) => {
    const response = {
      slideId,
      answer,
      timestamp: Date.now(),
      synced: navigator.onLine
    };
    
    // Always save locally first
    await localDB.responses.put(response);
    
    if (navigator.onLine) {
      try {
        await api.post('/responses', response);
        setSyncStatus('synced');
      } catch (error) {
        setSyncStatus('pending');
        queueForSync(response);
      }
    } else {
      setSyncStatus('offline');
      queueForSync(response);
    }
  };
  
  // Background sync when online
  useEffect(() => {
    const syncOfflineData = async () => {
      if (!navigator.onLine || offlineQueue.length === 0) return;
      
      setSyncStatus('syncing');
      const failed = [];
      
      for (const item of offlineQueue) {
        try {
          await api.post('/responses', item);
          await localDB.responses.update(item.id, { synced: true });
        } catch (error) {
          failed.push(item);
        }
      }
      
      setOfflineQueue(failed);
      setSyncStatus(failed.length > 0 ? 'partial' : 'synced');
    };
    
    window.addEventListener('online', syncOfflineData);
    const interval = setInterval(syncOfflineData, 30000); // Try every 30s
    
    return () => {
      window.removeEventListener('online', syncOfflineData);
      clearInterval(interval);
    };
  }, [offlineQueue]);
  
  return { saveResponse, syncStatus };
}
F-3: Intelligent Host Mode
jsx// client/src/components/HostModeToggle.jsx
function HostModeToggle({ isHost, onChange }) {
  return (
    <motion.label 
      className="relative inline-flex items-center cursor-pointer"
      whileTap={{ scale: 0.95 }}
    >
      <input
        type="checkbox"
        checked={isHost}
        onChange={(e) => {
          triggerHaptic('selection');
          onChange(e.target.checked);
        }}
        className="sr-only peer"
      />
      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none 
                      peer-focus:ring-4 peer-focus:ring-purple-800 
                      rounded-full peer peer-checked:after:translate-x-full 
                      peer-checked:after:border-white after:content-[''] 
                      after:absolute after:top-[2px] after:left-[2px] 
                      after:bg-white after:rounded-full after:h-5 after:w-5 
                      after:transition-all peer-checked:bg-purple-600">
      </div>
      <span className="ml-3 text-sm font-medium text-white">
        I'm the host
      </span>
      {isHost && (
        <motion.div
          initial={{ opacity: 0, x: -10 }}
          animate={{ opacity: 1, x: 0 }}
          className="ml-2"
        >
          <Badge variant="premium">Host Mode</Badge>
        </motion.div>
      )}
    </motion.label>
  );
}

// Server-side filtering
// server/routes/api/slides.js
router.get('/packages/:code/slides', async (req, res) => {
  const { code } = req.params;
  const { participantId } = req.query;
  
  // Get participant to check host status
  const participant = await getParticipant(participantId);
  
  // Get all slides for package
  let slides = await supabase
    .from('slides')
    .select('*')
    .eq('package_id', packageId)
    .order('position');
  
  // Filter based on host status
  if (!participant.is_host) {
    slides = slides.filter(slide => {
      const payload = slide.payload_json;
      return !payload.for_host;
    });
  }
  
  // Add metadata for host
  if (participant.is_host) {
    slides = slides.map(slide => ({
      ...slide,
      host_notes: getHostNotes(slide),
      suggested_duration: getSuggestedDuration(slide.type),
      participant_count: await getActiveParticipantCount(sessionId)
    }));
  }
  
  res.json({ slides, totalCount: slides.length });
});
F-4: Next-Level Question Components
jsx// client/src/components/questions/ScaleQuestion.jsx
function ScaleQuestion({ question, value, onChange }) {
  const [isDragging, setIsDragging] = useState(false);
  const [localValue, setLocalValue] = useState(value || 5);
  
  return (
    <motion.div 
      className="question-container"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      {/* Question with info tooltip */}
      <div className="flex items-start justify-between mb-6">
        <h3 className="text-2xl font-semibold text-white">
          {question.question}
        </h3>
        {question.info_tooltip && (
          <InfoTooltip content={question.info_tooltip} />
        )}
      </div>
      
      {/* Premium circular slider */}
      <div className="relative w-72 h-72 mx-auto">
        <svg className="absolute inset-0" viewBox="0 0 300 300">
          {/* Background track */}
          <circle
            cx="150"
            cy="150"
            r="120"
            stroke="rgba(255,255,255,0.1)"
            strokeWidth="40"
            fill="none"
          />
          
          {/* Progress track with gradient */}
          <circle
            cx="150"
            cy="150"
            r="120"
            stroke="url(#gradient)"
            strokeWidth="40"
            fill="none"
            strokeDasharray={`${(localValue / 10) * 754} 754`}
            strokeLinecap="round"
            transform="rotate(-90 150 150)"
            className="transition-all duration-300"
          />
          
          <defs>
            <linearGradient id="gradient">
              <stop offset="0%" stopColor="#7c3aed" />
              <stop offset="100%" stopColor="#581c87" />
            </linearGradient>
          </defs>
        </svg>
        
        {/* Draggable thumb */}
        <motion.div
          className="absolute w-12 h-12 bg-white rounded-full shadow-lg 
                     cursor-grab active:cursor-grabbing"
          style={{
            left: `${50 + 40 * Math.cos((localValue / 10) * 2 * Math.PI - Math.PI / 2)}%`,
            top: `${50 + 40 * Math.sin((localValue / 10) * 2 * Math.PI - Math.PI / 2)}%`,
            transform: 'translate(-50%, -50%)'
          }}
          drag
          dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
          dragElastic={0}
          onDragStart={() => {
            setIsDragging(true);
            triggerHaptic('selection');
          }}
          onDrag={(e, info) => {
            // Calculate value from position
            const rect = e.currentTarget.parentElement.getBoundingClientRect();
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            const angle = Math.atan2(
              info.point.y - rect.top - centerY,
              info.point.x - rect.left - centerX
            );
            const normalizedAngle = (angle + Math.PI / 2 + 2 * Math.PI) % (2 * Math.PI);
            const newValue = Math.round((normalizedAngle / (2 * Math.PI)) * 10);
            
            if (newValue !== localValue) {
              setLocalValue(newValue);
              triggerHaptic('selection');
            }
          }}
          onDragEnd={() => {
            setIsDragging(false);
            onChange(localValue);
            triggerHaptic('success');
          }}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        />
        
        {/* Center value display */}
        <div className="absolute inset-0 flex items-center justify-center">
          <motion.div 
            className="text-6xl font-bold text-white"
            animate={{ scale: isDragging ? 1.1 : 1 }}
          >
            {localValue}
          </motion.div>
        </div>
      </div>
      
      {/* Min/Max labels */}
      <div className="flex justify-between mt-8 px-8">
        <span className="text-white/60">{question.min_label}</span>
        <span className="text-white/60">{question.max_label}</span>
      </div>
    </motion.div>
  );
}

// client/src/components/questions/InfoTooltip.jsx
function InfoTooltip({ content }) {
  const [isOpen, setIsOpen] = useState(false);
  
  return (
    <TooltipProvider>
      <Tooltip open={isOpen} onOpenChange={setIsOpen}>
        <TooltipTrigger asChild>
          <motion.button
            className="w-6 h-6 rounded-full bg-white/10 text-white/60
                       hover:bg-white/20 hover:text-white
                       flex items-center justify-center"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={() => {
              triggerHaptic('selection');
              setIsOpen(!isOpen);
            }}
          >
            <InfoIcon className="w-4 h-4" />
          </motion.button>
        </TooltipTrigger>
        <TooltipContent 
          side="left" 
          className="max-w-xs bg-purple-900/95 backdrop-blur-xl
                     border-purple-700 text-white p-4 rounded-xl"
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
          >
            {content}
          </motion.div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}
F-5: Cinema-Quality Media Players
jsx// client/src/components/media/VideoPlayer.jsx
function VideoPlayer({ url, poster, title, onComplete }) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [progress, setProgress] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const videoRef = useRef(null);
  
  return (
    <motion.div 
      className="relative rounded-2xl overflow-hidden bg-black"
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
    >
      {/* Video element */}
      <video
        ref={videoRef}
        src={url}
        poster={poster}
        className="w-full h-auto"
        onTimeUpdate={(e) => {
          setProgress((e.target.currentTime / e.target.duration) * 100);
        }}
        onEnded={() => {
          setIsPlaying(false);
          onComplete?.();
          triggerHaptic('success');
        }}
      />
      
      {/* Glassmorphic controls overlay */}
      <AnimatePresence>
        {(!isPlaying || isControlsVisible) && (
          <motion.div
            className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {/* Title */}
            <div className="absolute top-4 left-4">
              <h4 className="text-white font-semibold">{title}</h4>
            </div>
            
            {/* Center play button */}
            {!isPlaying && (
              <motion.button
                className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
                           w-20 h-20 rounded-full bg-white/20 backdrop-blur-xl
                           flex items-center justify-center"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => {
                  videoRef.current?.play();
                  setIsPlaying(true);
                  triggerHaptic('selection');
                }}
              >
                <PlayIcon className="w-8 h-8 text-white ml-1" />
              </motion.button>
            )}
            
            {/* Bottom controls */}
            <div className="absolute bottom-0 left-0 right-0 p-4">
              {/* Progress bar */}
              <div className="relative h-1 bg-white/20 rounded-full mb-4">
                <motion.div
                  className="absolute left-0 top-0 h-full bg-gradient-to-r from-purple-500 to-purple-700 rounded-full"
                  style={{ width: `${progress}%` }}
                />
              </div>
              
              {/* Control buttons */}
              <div className="flex items-center justify-between">
                <button
                  onClick={() => {
                    isPlaying ? videoRef.current?.pause() : videoRef.current?.play();
                    setIsPlaying(!isPlaying);
                    triggerHaptic('selection');
                  }}
                  className="text-white"
                >
                  {isPlaying ? <PauseIcon /> : <PlayIcon />}
                </button>
                
                <button
                  onClick={() => {
                    if (document.fullscreenElement) {
                      document.exitFullscreen();
                    } else {
                      videoRef.current?.requestFullscreen();
                    }
                    triggerHaptic('selection');
                  }}
                  className="text-white"
                >
                  <MaximizeIcon />
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}
F-8: Haptic Feedback System
javascript// client/src/utils/haptics.js
class HapticEngine {
  constructor() {
    this.isSupported = 'vibrate' in navigator;
    this.patterns = {
      // Basic feedback
      tap: [10],
      doubleTap: [10, 50, 10],
      longPress: [50],
      
      // Navigation
      swipeSuccess: [5, 10, 5],
      swipeReject: [30, 20, 30],
      
      // Input feedback
      keyPress: [5],
      delete: [15],
      submit: [10, 30, 10],
      
      // State changes
      success: [10, 50, 10, 50, 20],
      error: [50, 100, 50],
      warning: [20, 40, 20],
      
      // Special moments
      bottleComplete: [20, 40, 20, 40, 60],
      tastingComplete: [50, 100, 50, 100, 50, 100, 100],
      
      // Slider feedback
      sliderTick: [3],
      sliderMilestone: [15],
    };
  }
  
  play(pattern, options = {}) {
    if (!this.isSupported) return;
    
    const { intensity = 1, delay = 0 } = options;
    const adjustedPattern = this.patterns[pattern].map(d => d * intensity);
    
    if (delay) {
      setTimeout(() => navigator.vibrate(adjustedPattern), delay);
    } else {
      navigator.vibrate(adjustedPattern);
    }
  }
  
  // Compose custom patterns
  compose(durations) {
    if (!this.isSupported) return;
    navigator.vibrate(durations);
  }
  
  // Continuous vibration with stop callback
  continuous(duration = 1000) {
    if (!this.isSupported) return { stop: () => {} };
    
    const interval = setInterval(() => {
      navigator.vibrate(50);
    }, 100);
    
    setTimeout(() => clearInterval(interval), duration);
    
    return {
      stop: () => clearInterval(interval)
    };
  }
}

export const haptic = new HapticEngine();
Real-time Collaboration Features (Bonus)
javascript// server/socket/tasting-room.js
io.on('connection', (socket) => {
  socket.on('join-tasting', async ({ sessionId, participantId }) => {
    socket.join(`session-${sessionId}`);
    
    // Notify host of new participant
    const participant = await getParticipant(participantId);
    if (!participant.is_host) {
      socket.to(`session-${sessionId}`).emit('participant-joined', {
        name: participant.display_name,
        timestamp: Date.now()
      });
    }
    
    // Send current participant count
    const count = await getActiveParticipantCount(sessionId);
    io.to(`session-${sessionId}`).emit('participant-count', count);
  });
  
  socket.on('host-message', async ({ sessionId, message }) => {
    // Real-time messages from host to participants
    socket.to(`session-${sessionId}`).emit('host-announcement', {
      message,
      timestamp: Date.now()
    });
  });
  
  socket.on('participant-progress', async ({ sessionId, participantId, slideIndex }) => {
    // Show host real-time progress of all participants
    const progress = await getSessionProgress(sessionId);
    socket.to(`session-${sessionId}`).emit('progress-update', progress);
  });
});

// client/src/components/host/ParticipantTracker.jsx
function ParticipantTracker({ sessionId }) {
  const [participants, setParticipants] = useState([]);
  const { socket } = useSocket();
  
  useEffect(() => {
    socket.on('progress-update', (progress) => {
      setParticipants(progress);
    });
    
    socket.on('participant-joined', ({ name }) => {
      toast.success(`${name} joined the tasting`);
      haptic.play('success');
    });
  }, []);
  
  return (
    <motion.div className="fixed top-4 right-4 bg-glass-bg backdrop-blur-xl
                          rounded-2xl p-4 border border-glass-border">
      <h4 className="text-white font-semibold mb-2">Live Participants</h4>
      <AnimatePresence>
        {participants.map((p) => (
          <motion.div
            key={p.id}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            className="flex items-center justify-between py-1"
          >
            <span className="text-white/80">{p.name}</span>
            <ProgressBar value={p.progress} max={totalSlides} />
          </motion.div>
        ))}
      </AnimatePresence>
    </motion.div>
  );
}
üìÅ Complete Project Structure
knowyourgrape/
‚îú‚îÄ‚îÄ client/                          # React frontend
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json           # PWA manifest
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ service-worker.js       # Offline support
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ icons/                  # App icons
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ gateway/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QRScanner.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CodeInput.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PackageValidator.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ questions/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TextQuestion.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ScaleQuestion.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CircularSlider.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MultipleChoice.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SingleChoice.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ InfoTooltip.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ media/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ VideoPlayer.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AudioPlayer.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WaveformVisualizer.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ slides/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SlideRenderer.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QuestionSlide.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MediaSlide.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ InterludeSlide.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ navigation/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProgressDots.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NavigationButtons.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SlideTransition.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ session/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SignInForm.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HostModeToggle.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SessionStatus.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ host/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ParticipantTracker.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HostControls.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SessionStats.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ summary/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FinalScreen.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TastingReport.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ShareOptions.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/                 # shadcn components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Gateway.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SignIn.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Tasting.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Summary.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useSession.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAutoSave.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useOfflineSync.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useProgress.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useHaptic.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useSocket.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ haptics.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ animations.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validators.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ offline-db.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globals.css
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ animations.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.jsx
‚îÇ   ‚îú‚îÄ‚îÄ .env.example
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ tailwind.config.js
‚îÇ   ‚îú‚îÄ‚îÄ vite.config.js
‚îÇ   ‚îî‚îÄ‚îÄ cypress/
‚îÇ       ‚îú‚îÄ‚îÄ e2e/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ complete-flow.cy.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ offline-mode.cy.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ host-features.cy.js
‚îÇ       ‚îî‚îÄ‚îÄ support/
‚îú‚îÄ‚îÄ server/                          # Express backend
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ redis.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ environment.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ packages.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sessions.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ participants.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ responses.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ health.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cors.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rateLimit.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ supabase.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ session.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ etl.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ socket/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tasting-room.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jobs/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ airtable-sync.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ server.ts
‚îÇ   ‚îú‚îÄ‚îÄ .env.example
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ scripts/                         # ETL and utilities
‚îÇ   ‚îú‚îÄ‚îÄ etl/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ airtable-sync.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ transformers.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config.js
‚îÇ   ‚îî‚îÄ‚îÄ setup/
‚îÇ       ‚îî‚îÄ‚îÄ create-tables.sql
‚îú‚îÄ‚îÄ storybook/                       # Component library
‚îÇ   ‚îú‚îÄ‚îÄ .storybook/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ preview.js
‚îÇ   ‚îî‚îÄ‚îÄ stories/
‚îÇ       ‚îú‚îÄ‚îÄ Questions.stories.jsx
‚îÇ       ‚îú‚îÄ‚îÄ Media.stories.jsx
‚îÇ       ‚îî‚îÄ‚îÄ Navigation.stories.jsx
‚îî‚îÄ‚îÄ docs/
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ API.md
    ‚îú‚îÄ‚îÄ DEPLOYMENT.md
    ‚îî‚îÄ‚îÄ ARCHITECTURE.md
üöÄ Advanced Implementation Details
Progressive Web App Features
javascript// client/public/service-worker.js
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('kyg-v1').then((cache) => {
      return cache.addAll([
        '/',
        '/styles/globals.css',
        '/offline.html',
        // Cache all static assets
      ]);
    })
  );
});

self.addEventListener('fetch', (event) => {
  // Network-first strategy for API calls
  if (event.request.url.includes('/api/')) {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          // Clone and cache successful responses
          const responseClone = response.clone();
          caches.open('kyg-api').then((cache) => {
            cache.put(event.request, responseClone);
          });
          return response;
        })
        .catch(() => {
          // Fallback to cache for offline
          return caches.match(event.request);
        })
    );
  }
});

// Background sync for offline responses
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-responses') {
    event.waitUntil(syncOfflineResponses());
  }
});
Performance Optimizations
javascript// client/src/hooks/useImagePreload.js
export function useImagePreload(slides) {
  useEffect(() => {
    // Preload next 2 slides' images
    const preloadImages = async () => {
      const currentIndex = getCurrentSlideIndex();
      const nextSlides = slides.slice(currentIndex + 1, currentIndex + 3);
      
      nextSlides.forEach((slide) => {
        if (slide.type === 'media' && slide.payload_json.poster_url) {
          const img = new Image();
          img.src = slide.payload_json.poster_url;
        }
      });
    };
    
    preloadImages();
  }, [currentSlideIndex]);
}

// Lazy load heavy components
const VideoPlayer = lazy(() => 
  import(/* webpackChunkName: "video-player" */ './components/media/VideoPlayer')
);
ETL Script with Robust Error Handling
javascript// scripts/etl/airtable-sync.js
const Airtable = require('airtable');
const { createClient } = require('@supabase/supabase-js');
const cron = require('node-cron');

class AirtableETL {
  constructor(config) {
    this.airtable = new Airtable({ apiKey: config.AIRTABLE_API_KEY });
    this.base = this.airtable.base(config.AIRTABLE_BASE_ID);
    this.supabase = createClient(config.SUPABASE_URL, config.SUPABASE_KEY);
    this.lastSyncTime = null;
  }
  
  async syncPackages() {
    console.log('Starting package sync...');
    const packages = await this.fetchAirtableRecords('Packages');
    
    for (const pkg of packages) {
      try {
        // Generate unique code if not exists
        const code = pkg.fields.Code || this.generateUniqueCode(pkg.fields.Name);
        
        // Upsert package
        const { data: packageData, error } = await this.supabase
          .from('packages')
          .upsert({
            code,
            name: pkg.fields.Name,
            description: pkg.fields.Description,
            updated_at: new Date()
          }, { onConflict: 'code' })
          .select()
          .single();
          
        if (error) throw error;
        
        // Sync slides for this package
        await this.syncSlidesForPackage(pkg.id, packageData.id);
        
      } catch (error) {
        console.error(`Failed to sync package ${pkg.fields.Name}:`, error);
        // Continue with next package
      }
    }
  }
  
  async syncSlidesForPackage(airtablePackageId, supabasePackageId) {
    // Delete existing slides
    await this.supabase
      .from('slides')
      .delete()
      .eq('package_id', supabasePackageId);
    
    // Fetch questions from Airtable
    const questions = await this.fetchAirtableRecords('Questions', {
      filterByFormula: `{Package} = '${airtablePackageId}'`
    });
    
    // Transform and insert
    const slides = questions.map((q, index) => ({
      package_id: supabasePackageId,
      position: index,
      type: 'question',
      payload_json: this.transformQuestion(q.fields)
    }));
    
    const { error } = await this.supabase
      .from('slides')
      .insert(slides);
      
    if (error) throw error;
  }
  
  transformQuestion(airtableQuestion) {
    return {
      question_type: this.mapQuestionType(airtableQuestion['Response Type']),
      bottle_number: parseInt(airtableQuestion['Bottle Number']) || 1,
      bottle_name: airtableQuestion['Bottle Name'],
      question: airtableQuestion['Question Text'],
      options: airtableQuestion['Options']?.split(',').map(o => o.trim()),
      info_tooltip: airtableQuestion['Info Tooltip'],
      for_host: airtableQuestion['Host Only'] === true
    };
  }
  
  generateUniqueCode(name) {
    // Generate 6-character code from name
    const base = name.replace(/[^A-Z0-9]/gi, '').toUpperCase().substring(0, 3);
    const random = Math.random().toString(36).substring(2, 5).toUpperCase();
    return base + random;
  }
}

// Schedule nightly sync at 2 AM
cron.schedule('0 2 * * *', async () => {
  const etl = new AirtableETL(process.env);
  try {
    await etl.syncPackages();
    console.log('ETL sync completed successfully');
  } catch (error) {
    console.error('ETL sync failed:', error);
    // Send alert to admin
  }
});
üéØ Success Metrics & Testing
Performance Targets:
javascript// cypress/e2e/performance.cy.js
describe('Performance Tests', () => {
  it('achieves Lighthouse score >= 90', () => {
    cy.visit('/');
    cy.lighthouse({
      performance: 90,
      accessibility: 90,
      'best-practices': 90,
      seo: 90,
      pwa: 90
    });
  });
  
  it('loads package gateway in < 1.5s', () => {
    cy.visit('/', {
      onBeforeLoad: (win) => {
        win.performance.mark('start');
      }
    });
    
    cy.get('[data-testid="gateway-loaded"]').should('exist');
    
    cy.window().then((win) => {
      win.performance.mark('end');
      win.performance.measure('pageLoad', 'start', 'end');
      const measure = win.performance.getEntriesByName('pageLoad')[0];
      expect(measure.duration).to.be.lessThan(1500);
    });
  });
});
User Experience Tests:
javascript// cypress/e2e/complete-flow.cy.js
describe('Complete Tasting Flow', () => {
  it('handles 30-minute session with network interruptions', () => {
    // Start tasting
    cy.visit('/');
    cy.get('[data-testid="code-input"]').type('DEMO01');
    cy.get('[data-testid="start-button"]').click();
    
    // Sign in
    cy.get('[data-testid="name-input"]').type('Test User');
    cy.get('[data-testid="email-input"]').type('test@example.com');
    cy.get('[data-testid="continue-button"]').click();
    
    // Answer questions
    cy.get('[data-testid="question-1"]').type('Great nose, hints of vanilla');
    
    // Simulate offline
    cy.window().then((win) => {
      win.dispatchEvent(new Event('offline'));
    });
    
    // Continue answering offline
    cy.get('[data-testid="next-button"]').click();
    cy.get('[data-testid="scale-slider"]').setValue(8);
    
    // Verify offline indicator
    cy.get('[data-testid="sync-status"]').should('contain', 'Offline');
    
    // Go back online
    cy.window().then((win) => {
      win.dispatchEvent(new Event('online'));
    });
    
    // Verify sync
    cy.get('[data-testid="sync-status"]').should('contain', 'Synced');
  });
});
üíé Final Polish & Delight
Loading States with Personality:
jsxfunction WineGlassLoader() {
  return (
    <motion.div className="flex flex-col items-center">
      <motion.div
        className="wine-glass"
        animate={{
          rotate: [0, -5, 5, 0],
          scale: [1, 1.02, 0.98, 1]
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        <svg viewBox="0 0 100 150" className="w-24 h-36">
          {/* Wine glass shape */}
          <path d="..." fill="url(#wine-gradient)" />
          
          {/* Wine filling animation */}
          <motion.path
            d="..."
            fill="url(#wine-fill)"
            initial={{ scaleY: 0 }}
            animate={{ scaleY: 1 }}
            transition={{ duration: 2 }}
          />
        </svg>
      </motion.div>
      
      <motion.p
        className="text-white/60 mt-4"
        animate={{ opacity: [0.4, 1, 0.4] }}
        transition={{ duration: 2, repeat: Infinity }}
      >
        Preparing your tasting experience...
      </motion.p>
    </motion.div>
  );
}
Success Celebrations:
jsxfunction BottleComplete({ bottleNumber, bottleName }) {
  const [showCelebration, setShowCelebration] = useState(true);
  
  useEffect(() => {
    haptic.play('bottleComplete');
    const timer = setTimeout(() => setShowCelebration(false), 3000);
    return () => clearTimeout(timer);
  }, []);
  
  return (
    <AnimatePresence>
      {showCelebration && (
        <motion.div
          className="fixed inset-0 flex items-center justify-center z-50"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.div
            className="bg-purple-900/90 backdrop-blur-xl rounded-3xl p-8"
            initial={{ scale: 0.8, rotate: -10 }}
            animate={{ scale: 1, rotate: 0 }}
            exit={{ scale: 0.8, opacity: 0 }}
          >
            <motion.div
              animate={{
                scale: [1, 1.2, 1],
                rotate: [0, 360]
              }}
              transition={{ duration: 0.6 }}
            >
              <CheckCircleIcon className="w-20 h-20 text-green-400 mx-auto" />
            </motion.div>
            
            <h3 className="text-2xl font-bold text-white mt-4">
              Bottle {bottleNumber} Complete!
            </h3>
            <p className="text-white/80 mt-2">{bottleName}</p>
            
            {/* Confetti particles */}
            <Confetti colors={['#7c3aed', '#581c87', '#a855f7']} />
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
Error Recovery with Grace:
jsxfunction ConnectionLost() {
  return (
    <motion.div
      className="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-96
                 bg-orange-900/90 backdrop-blur-xl rounded-2xl p-4
                 border border-orange-700"
      initial={{ y: 100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      exit={{ y: 100, opacity: 0 }}
    >
      <div className="flex items-start gap-3">
        <WifiOffIcon className="w-5 h-5 text-orange-400 mt-1" />
        <div className="flex-1">
          <h4 className="text-white font-semibold">Connection Lost</h4>
          <p className="text-white/80 text-sm mt-1">
            Don't worry! Your answers are saved locally and will sync when you're back online.
          </p>
        </div>
      </div>
      
      <motion.div
        className="mt-3 h-1 bg-orange-700 rounded-full overflow-hidden"
        initial={{ scaleX: 0 }}
        animate={{ scaleX: 1 }}
        transition={{ duration: 30 }} // Auto-dismiss after 30s
      >
        <div className="h-full bg-orange-400" />
      </motion.div>
    </motion.div>
  );
}

This implementation delivers a wine tasting experience that feels magical, works flawlessly offline, and delights users at every interaction.