Update HostDashboard.tsx to Display Short Session Code and Use it for Sharing

Why:

Hosts need to see and easily share the new short session code.
QR codes and shareable links should utilize this short code for a more user-friendly participant joining experience.
What:

Fetch and Expect short_code: Ensure the useQuery fetching session data in HostDashboard.tsx (for GET /api/sessions/:sessionId) correctly expects and can access the session.short_code field. (The backend already returns it, and shared/schema.ts is assumed updated).
Display Short Code: Add a UI element in HostDashboard.tsx to prominently display the fetched session.short_code.
Update Sharing Functions:
Modify generateQRData() to create a URL like /join?sessionCode=<actual_short_code> instead of /join?sessionId=<UUID>.
Ensure copySessionLink(), downloadQR(), and viewQR() use this new URL structure.
How:

Modify HostDashboard.tsx:

Confirm short_code Access:
The useQuery for session data:

TypeScript

const { data: session, isLoading: sessionLoading, refetch: refetchSession } = useQuery<Session & { packageCode?: string; short_code?: string | null }>({ // Ensure type includes short_code
  queryKey: [`/api/sessions/${sessionId}`], // sessionId here is the UUID from URL params
  enabled: !!sessionId,
  refetchInterval: 5000,
});
Ensure the type definition used for Session here (likely imported from @shared/schema) includes short_code as an optional string. The backend getSessionById now returns it.

Display the Short Code:
In the JSX, find a suitable place to display the short code, perhaps near the existing package name/code or session status display. Example:

TypeScript

// Within the header section or a new Card:
{session?.short_code && (
  <div className="mt-4 text-center">
    <p className="text-purple-200 mb-1">Share this code with participants:</p>
    <Badge className="text-2xl font-bold tracking-wider bg-white/20 text-white px-4 py-2">
      {session.short_code}
    </Badge>
  </div>
)}
Update generateQRData() function:
Change this function:

TypeScript

const generateQRData = (): string => {
  if (!session?.short_code) { // Use short_code here
    return "";
  }
  const baseUrl = window.location.origin;
  // Use 'sessionCode' as the query parameter for the short code
  return `<span class="math-inline">\{baseUrl\}/join?sessionCode\=</span>{session.short_code}`;
};
Verify Dependent Functions: copySessionLink, downloadQR, and viewQR should now correctly use the URL generated by the updated generateQRData which contains sessionCode=<short_code>. No changes should be needed in these functions themselves if generateQRData is correctly updated.

Testing Notes for Replit AI (Conceptual):

After these changes, when a host creates a session and views the Host Dashboard:
The new 6-character short session code should be visible.
The "Copy Link" button should copy a URL like https://<domain>/join?sessionCode=XYZ123.
"View QR Code" and "Download QR Code" should generate QR codes encoding this new URL structure.