Part 2: Implement Slide Creation (PackageEditor.tsx)
File to Modify: client/pages/PackageEditor.tsx
Action: Make the following precise changes to implement the slide creation logic.
// In client/pages/PackageEditor.tsx

// Step A: Add createSlideMutation alongside the other mutations
const createSlideMutation = useMutation({
  mutationFn: (slideData: any) => apiRequest('POST', '/api/slides', slideData),
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: [`/api/packages/${code}/editor`] });
    toast({ title: "Slide created successfully" });
  },
  onError: (error: any) => toast({ title: "Error creating slide", description: error.message, variant: "destructive" }),
});

// Step B: Add the handleAddSlide function
const handleAddSlide = (wineId: string, template: any) => {
  const wineSlides = slides.filter(s => s.packageWineId === wineId);
  const nextPosition = wineSlides.length > 0 ? Math.max(...wineSlides.map(s => s.position)) + 1 : 1;

  const slideData = {
    packageWineId: wineId,
    position: nextPosition,
    type: template.type,
    sectionType: template.sectionType,
    payloadJson: {
      title: template.name, // Use template name as default title
      description: template.description,
      ...template.payloadTemplate,
    },
  };
  createSlideMutation.mutate(slideData);
};

// Step C: Update the JSX for the expanded wine card
// Find the <AnimatePresence> block for the expanded wines (around line 400)
// and replace its content with the following:

<AnimatePresence>
  {isExpanded && (
    <motion.div initial={{ height: 0, opacity: 0 }} animate={{ height: 'auto', opacity: 1 }} exit={{ height: 0, opacity: 0 }} className="pt-2 pl-4 border-l-2 border-white/10 ml-5">
      {/* Slides List */}
      <div className="mt-2 space-y-1">
        {wineSlides.map((slide, index) => (
          <div
            key={slide.id}
            className={`p-2 rounded-md cursor-pointer transition-colors ${
              activeSlideId === slide.id
                ? 'bg-purple-600/20'
                : 'hover:bg-white/10'
            }`}
            onClick={() => setActiveSlideId(slide.id)}
          >
            <div className="flex items-center space-x-2">
              <span className="text-xs text-white/40">#{index + 1}</span>
              <p className="text-sm font-medium text-white truncate">
                {(slide.payloadJson as any)?.title || 'Untitled Slide'}
              </p>
            </div>
          </div>
        ))}
      </div>

      {/* Add Slide Templates */}
      <div className="mt-4 pt-2 border-t border-white/10">
        <div className="space-y-2">
          {SLIDE_TEMPLATES.map(template => (
            <Button
              key={template.name}
              size="sm"
              variant="ghost"
              className="w-full text-xs h-8 justify-start text-white/70 hover:text-white hover:bg-white/5"
              onClick={() => handleAddSlide(wine.id, template)}
              title={template.description}
            >
              <template.icon className="mr-2 h-3 w-3 flex-shrink-0 text-purple-400" />
              <span className="truncate">Add {template.name}</span>
            </Button>
          ))}
        </div>
      </div>
    </motion.div>
  )}
</AnimatePresence>
Use code with caution.
Tsx
These changes will fix the UI dead-end, allowing sommeliers to add slides to their wines, and will ensure those new slides are correctly saved to the database. This completes the core content creation loop.