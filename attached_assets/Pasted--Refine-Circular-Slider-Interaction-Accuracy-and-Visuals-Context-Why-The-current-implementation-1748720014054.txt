 Refine Circular Slider Interaction, Accuracy, and Visuals
Context & Why:
The current implementation of the custom circular slider in client/src/components/questions/ScaleQuestion.tsx has a few issues:

Drag Mechanic: The draggable thumb (<motion.circle>) can be dragged freely within the SVG's bounds rather than feeling constrained to the circular path. This creates a "weird" user experience, as shown in the provided images.
Fill Accuracy: The progress arc's fill may not accurately represent the min/max values (e.g., not appearing to reach 100% at the maximum value or starting incorrectly).
Redundant Indicators: The linear bar indicators at the bottom of the component are redundant if the circular slider itself clearly shows the value and progress.
We need to refine this component to be a beautiful, intuitive, and accurate circular slider as envisioned in the "Ultimate Prompt."

Objective (What):
Overhaul the interaction logic and visual representation of the circular slider in client/src/components/questions/ScaleQuestion.tsx to:

Ensure the drag interaction correctly and smoothly sets the slider value by constraining input to an angular interpretation around the circle's center.
Make the draggable thumb visually follow the circular path accurately during interaction.
Guarantee the progress arc precisely reflects the slider's value, correctly filling the 270-degree arc from min to max.
Remove the redundant linear bar indicators at the bottom.
Enhance the SVG aesthetics for a more "premium" feel if simple adjustments can be made.
Implementation Details (How):

Improve Drag Interaction & Thumb Constraint:

Interaction Target: Instead of making the thumb <motion.circle> itself the primary drag target with dragConstraints={svgRef}, consider making the entire SVG area (or a larger invisible circular hit area) responsive to pan/drag gestures. The "Ultimate Prompt's" F-4 example for ScaleQuestion.jsx used onPan for a motion.div acting as the thumb.
Angle Calculation: The existing handleDrag logic which calculates an angle from info.point.x and info.point.y relative to the SVG center is a good foundation. This should remain the core way to determine the intended value.
Visual Snap: Ensure that when localValue is updated, the thumbPosition (which sets cx and cy of the thumb) causes the thumb to visually snap immediately and stay on the circular path defined by radius. The feeling of dragging the thumb off the path needs to be eliminated. The thumb's position should always be a direct render of getThumbPosition(localValue).
Alternative Drag Constraints (If AI struggles with snapping perfectly): If directly constraining to a circular path via Framer Motion's built-in dragConstraints is too complex, focus on ensuring the handleDrag logic is robust and the visual update of the thumb to its calculated position on the circle is immediate and feels directly responsive to the user's pointer movement interpreted as an angle.
Fix Progress Arc Fill Accuracy:

Verify Arc Length: The arc is 270 degrees. The progress variable (0 to 1) should map to this arc. The strokeDashoffset calculation is circumference * (1 - progress * 0.75) and the progress circle is rotated by -135 degrees.
Review Start/End Points: Ensure that when localValue is question.scale_min, the arc visually starts at the -135 degree position. When localValue is question.scale_max, the arc visually ends and is fully filled up to the +135 degree position (covering 270 degrees).
strokeLinecap="round": While visually nice, this can slightly extend the perceived start/end of the line. If it's causing issues with precise visual alignment at min/max, consider changing to strokeLinecap="butt" for the progress ring and see if that helps align the visual fill precisely with the 0% and 100% points of the 270-degree arc.
Gradient Application: Ensure the url(#gradient) is applied correctly along the arc.
Remove Redundant Linear Indicators:

Delete the entire div block responsible for rendering the linear bar indicators at the bottom of the component (currently lines 242-276). The circular slider itself (arc, central value, min/max labels) should provide sufficient value indication.
Enhance SVG Aesthetics (Simple Adjustments):

Thumb Appearance: Ensure the thumb (<motion.circle> for the draggable element) has a clear, refined look. The current fill="url(#thumbGradient)" and stroke="hsl(var(--primary))" is a good start. Ensure its r={thumbRadius} is visually balanced with progressStrokeWidth.
Clarity of Min/Max Labels: Ensure question.scale_labels[0] and question.scale_labels[1] are clearly visible and well-positioned relative to the start and end of the 270-degree arc. Their current absolute positioning might need adjustment based on the final SVG size.
Overall Polish: Review line weights, colors, and the glow effect to ensure they contribute to a "premium, modern, fresh, powerful" feel, rather than looking like basic shapes.
Acceptance Criteria:

Dragging interaction feels smooth and intuitive: the user's gesture correctly changes the slider's value, and the visual thumb element stays perfectly on the defined circular track. The thumb should not be draggable off the track.
The circular progress arc accurately fills from 0% (at question.scale_min) to 100% (at question.scale_max) over the defined 270-degree sweep, starting and ending at the correct visual points.
The redundant linear bar value indicators at the bottom of the component are removed.
The overall visual presentation of the circular slider (track, progress arc, thumb, central value text, min/max labels) is polished, elegant, and clear.
All existing functionality (haptics, onChange callback, display of question title/description) remains intact and correct.